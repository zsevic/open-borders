{"version":3,"sources":["script.js"],"names":["NEGATIVE_TEST_REQUIRED","NO_TEST_REQUIRED","QUARANTINE_REQUIRED","countryTypes","titleCase","text","split","map","item","toLowerCase","charAt","substring","join","loadCountries","API_URL","groups","fetch","then","response","json","reduce","acc","current","status","push","forEach","type","countriesByType","document","getElementById","name","countryName","info","countryInfo","countryHtml","innerHTML","err","console","error"],"mappings":";AAAA,MAAMA,EAAyB,yBACzBC,EAAmB,mBACnBC,EAAsB,sBAEtBC,EAAe,CAACH,EAAwBC,EAAkBC,GAE1DE,EAAaC,GAASA,EAAKC,MAAM,KAAKC,IAAIC,GACjC,MAATA,EAAqBA,EAAKC,cACvBD,EAAKE,OAAO,GAAKF,EAAKG,UAAU,GAAGF,eACzCG,KAAK,KAEFC,EAAgB,UAChB,IACIC,MAAAA,EAAiC,qCAEjCC,SADkBC,MAASF,GAAAA,OAAAA,EAAT,mBAAkCG,KAAKC,GAAYA,EAASC,SAC3DC,OAAO,CAACC,EAAKC,KAChCD,EAAIC,EAAQC,QAASF,EAAIC,EAAQC,QAAQC,KAAKF,GAC7CD,EAAIC,EAAQC,QAAU,CAACD,GACrBD,GACN,IACHlB,EAAasB,QAAQC,IACbC,MAAAA,EAAkBC,SAASC,eAAeH,GAChDX,EAAOW,GAAMD,QAAsD,IAA7C,IAAEK,KAAMC,EAAaC,KAAMC,GAAkB,EAC3DC,MAAAA,EAEyB9B,wLAAAA,OAAAA,EAAU2B,GAEmBE,+FAAAA,OAAAA,EAJ5D,cAKAN,EAAgBQ,WAAaD,MAGjC,MAAOE,GACPC,QAAQC,MAAMF,KAIlBvB","file":"script.ed386623.js","sourceRoot":"../src","sourcesContent":["const NEGATIVE_TEST_REQUIRED = 'NEGATIVE_TEST_REQUIRED';\nconst NO_TEST_REQUIRED = 'NO_TEST_REQUIRED';\nconst QUARANTINE_REQUIRED = 'QUARANTINE_REQUIRED';\n\nconst countryTypes = [NEGATIVE_TEST_REQUIRED, NO_TEST_REQUIRED, QUARANTINE_REQUIRED];\n\nconst titleCase = (text) => text.split(' ').map(item => {\n  if (item === 'I') return item.toLowerCase();\n  return item.charAt(0) + item.substring(1).toLowerCase();\n}).join(' ');\n\nconst loadCountries = async () => {\n  try {\n    const API_URL = process.env.API_URL || 'https://open-borders.herokuapp.com';\n    const countries = await fetch(`${API_URL}/api/countries`).then(response => response.json());\n    const groups = countries.reduce((acc, current) => {\n      if (acc[current.status]) acc[current.status].push(current);\n      else acc[current.status] = [current];\n      return acc;\n    }, {});\n    countryTypes.forEach(type => {\n      const countriesByType = document.getElementById(type);\n      groups[type].forEach(({ name: countryName, info: countryInfo }) => {\n        const countryHtml = `<div class=\"list-group-item list-group-item-action flex-column align-items-start\">\n        <div class=\"d-flex w-100 justify-content-between\">\n          <h5 class=\"mb-1 text-info\">${titleCase(countryName)}</h5>\n          </div>\n          <p class=\"mb-1 text-muted\" style=\"word-wrap:break-word\">${countryInfo}</p></div>`;\n        countriesByType.innerHTML += countryHtml;\n      });\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nloadCountries();\n"]}