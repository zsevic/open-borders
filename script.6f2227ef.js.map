{"version":3,"sources":["script.js"],"names":["NEGATIVE_TEST_REQUIRED","NO_TEST_REQUIRED","QUARANTINE_REQUIRED","countryTypes","titleCase","text","split","map","item","toLowerCase","charAt","substring","join","setCountryCounter","forEach","type","countriesByTypeCounter","filter","call","document","getElementById","children","element","style","display","length","countriesByTypeTabCounter","countriesByTypeBadge","countriesByTypeTabBadge","innerHTML","addEventListener","event","value","target","countryList","querySelectorAll","country","values","parentElement","name","startsWith","loadCountries","API_URL","groups","fetch","then","response","json","reduce","acc","current","status","push","countriesByType","countriesByTypeTab","countryName","info","countryInfo","flag","countryHtml","err","console","error"],"mappings":";AAAA,MAAMA,EAAyB,yBACzBC,EAAmB,mBACnBC,EAAsB,sBAEtBC,EAAe,CAACH,EAAwBC,EAAkBC,GAE1DE,EAAaC,GAASA,EAAKC,MAAM,KAAKC,IAAIC,GACjC,MAATA,EAAqBA,EAAKC,cACjB,QAATD,EAAuBA,EACpBA,EAAKE,OAAO,GAAKF,EAAKG,UAAU,GAAGF,eACzCG,KAAK,KAEFC,EAAoB,KACxBV,EAAaW,QAAQC,IACbC,MAAAA,EAAyB,GAAGC,OAC/BC,KAAKC,SAASC,eAAeL,GAAMM,SAAWC,GAAsC,SAA1BA,EAAQC,MAAMC,SACxEC,OACGC,EAA4B,GAAGT,OAClCC,KAAKC,SAASC,eAAkBL,GAAAA,OAAAA,EAAYM,SAAAA,SAAWC,GAAsC,SAA1BA,EAAQC,MAAMC,SACjFC,OACGE,EAAuBR,SAASC,eAAkBL,GAAAA,OAAAA,EAAxD,WACMa,EAA0BT,SAASC,eAAkBL,GAAAA,OAAAA,EAA3D,eACAY,EAAqBE,UAAYb,EACjCY,EAAwBC,UAAYH,KAIxCP,SAASC,eAAe,gBAAgBU,iBAAiB,QAAUC,IAC3D,MAAA,MAAEC,GAAUD,EAAME,OACpB,IAACD,EAAO,CACJE,MAAAA,EAAcf,SAASgB,iBAAiB,YACzC,IAAA,MAAMC,KAAWF,EAAYG,SAChCD,EAAQE,cAAcA,cAAcf,MAAMC,QAAU,GAGtD,YADAX,IAIIqB,MAAAA,EAAcf,SAASgB,iBAAiB,YACzC,IAAA,MAAMC,KAAWF,EAAYG,SAAU,CACpC,MAAG,IAAGE,GAAQH,EAAQP,UAAUvB,MAAM,KACxBiC,EAAK3B,KAAK,KAAKH,cAEnB+B,WAAWR,EAAMvB,eAC/B2B,EAAQE,cAAcA,cAAcf,MAAMC,QAAU,GAEpDY,EAAQE,cAAcA,cAAcf,MAAMC,QAAU,OAGxDX,MAGF,MAAM4B,EAAgB,UAChB,IACIC,MAAAA,EAAiC,qCAEjCC,SADkBC,MAASF,GAAAA,OAAAA,EAAT,mBAAkCG,KAAKC,GAAYA,EAASC,SAC3DC,OAAO,CAACC,EAAKC,KAChCD,EAAIC,EAAQC,QAASF,EAAIC,EAAQC,QAAQC,KAAKF,GAC7CD,EAAIC,EAAQC,QAAU,CAACD,GACrBD,GACN,IACH9C,EAAaW,QAAQC,IAAQ,IAAA,EACrBsC,MAAAA,EAAkBlC,SAASC,eAAeL,GAC1CY,EAAuBR,SAASC,eAAkBL,GAAAA,OAAAA,EAAxD,WACMuC,EAAqBnC,SAASC,eAAkBL,GAAAA,OAAAA,EAAtD,SACMa,EAA0BT,SAASC,eAAkBL,GAAAA,OAAAA,EAA3D,eACcD,QAAd6B,EAAAA,EAAO5B,UAAOD,IAAAA,GAAAA,EAAAA,QAA4D,IAAnD,IAAEyB,KAAMgB,EAAaC,KAAMC,EAA3B,KAAwCC,GAAW,EAClEC,MAAAA,EAEiCD,gMAAAA,OAAAA,EAAQtD,KAAAA,OAAAA,EAAUmD,GAEGE,+FAAAA,OAAAA,EAJ5D,cAKAJ,EAAgBxB,WAAa8B,EAC7BL,EAAmBzB,WAAa8B,IAElChC,EAAqBE,UAAYc,EAAO5B,GAAMU,OAC9CG,EAAwBC,UAAYc,EAAO5B,GAAMU,SAEnD,MAAOmC,GACPC,QAAQC,MAAMF,KAIlBnB","file":"script.6f2227ef.js","sourceRoot":"../src","sourcesContent":["const NEGATIVE_TEST_REQUIRED = 'NEGATIVE_TEST_REQUIRED';\nconst NO_TEST_REQUIRED = 'NO_TEST_REQUIRED';\nconst QUARANTINE_REQUIRED = 'QUARANTINE_REQUIRED';\n\nconst countryTypes = [NEGATIVE_TEST_REQUIRED, NO_TEST_REQUIRED, QUARANTINE_REQUIRED];\n\nconst titleCase = (text) => text.split(' ').map(item => {\n  if (item === 'I') return item.toLowerCase();\n  if (item === 'SAD') return item;\n  return item.charAt(0) + item.substring(1).toLowerCase();\n}).join(' ');\n\nconst setCountryCounter = () => {\n  countryTypes.forEach(type => {\n    const countriesByTypeCounter = [].filter\n      .call(document.getElementById(type).children, (element) => element.style.display !== 'none')\n      .length;\n    const countriesByTypeTabCounter = [].filter\n      .call(document.getElementById(`${type}_TAB`).children, (element) => element.style.display !== 'none')\n      .length;\n    const countriesByTypeBadge = document.getElementById(`${type}_BADGE`);\n    const countriesByTypeTabBadge = document.getElementById(`${type}_TAB_BADGE`);\n    countriesByTypeBadge.innerHTML = countriesByTypeCounter;\n    countriesByTypeTabBadge.innerHTML = countriesByTypeTabCounter;\n  });\n}\n\ndocument.getElementById('input-search').addEventListener('input', (event) => {\n  const { value } = event.target;\n  if (!value) {\n    const countryList = document.querySelectorAll('.country');\n    for (const country of countryList.values()) {\n      country.parentElement.parentElement.style.display = '';\n    }\n    setCountryCounter();\n    return;\n  }\n\n  const countryList = document.querySelectorAll('.country');\n  for (const country of countryList.values()) {\n    const [, ...name] = country.innerHTML.split(' ');\n    const countryName = name.join(' ').toLowerCase();\n\n    if (countryName.startsWith(value.toLowerCase())) {\n      country.parentElement.parentElement.style.display = '';\n    } else {\n      country.parentElement.parentElement.style.display = 'none';\n    }\n  }\n  setCountryCounter();\n});\n\nconst loadCountries = async () => {\n  try {\n    const API_URL = process.env.API_URL || 'https://open-borders.herokuapp.com';\n    const countries = await fetch(`${API_URL}/api/countries`).then(response => response.json());\n    const groups = countries.reduce((acc, current) => {\n      if (acc[current.status]) acc[current.status].push(current);\n      else acc[current.status] = [current];\n      return acc;\n    }, {});\n    countryTypes.forEach(type => {\n      const countriesByType = document.getElementById(type);\n      const countriesByTypeBadge = document.getElementById(`${type}_BADGE`);\n      const countriesByTypeTab = document.getElementById(`${type}_TAB`);\n      const countriesByTypeTabBadge = document.getElementById(`${type}_TAB_BADGE`);\n      groups[type]?.forEach(({ name: countryName, info: countryInfo, flag }) => {\n        const countryHtml = `<div class=\"list-group-item list-group-item-action flex-column align-items-start\">\n        <div class=\"d-flex w-100 justify-content-between\">\n          <h5 class=\"mb-1 text-info country\">${flag} ${titleCase(countryName)}</h5>\n          </div>\n          <p class=\"mb-1 text-muted\" style=\"word-wrap:break-word\">${countryInfo}</p></div>`;\n        countriesByType.innerHTML += countryHtml;\n        countriesByTypeTab.innerHTML += countryHtml;\n      });\n      countriesByTypeBadge.innerHTML = groups[type].length;\n      countriesByTypeTabBadge.innerHTML = groups[type].length;\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nloadCountries();\n"]}