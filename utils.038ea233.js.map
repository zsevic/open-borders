{"version":3,"sources":["scripts/constants.js","scripts/utils.js"],"names":["CLOSED_BORDER","NEGATIVE_TEST_REQUIRED","NO_TEST_REQUIRED","QUARANTINE_REQUIRED","COUNTRY_TYPES","OBJECT_STORE","IDB_DATABASE_NAME","titleCase","text","split","map","item","toLowerCase","charAt","substring","join","hideLoader","document","getElementById","innerHTML","isFacebookApp","ua","navigator","userAgent","vendor","window","opera","indexOf","adaptCSSFbBrowser","$","css","loadCountriesHtml","countries","length","groups","reduce","acc","current","status","push","forEach","type","countriesByType","countriesByTypeBadge","countriesByTypeInfo","countriesByTypeTab","countriesByTypeTabBadge","countriesByTypeTabInfo","name","countryName","info","countryInfo","flag","countryHtml","countriesByTypeStyleDisplay","style","display","resetCountriesHtml","setActiveTab","i","countriesByTypeCounter","filter","call","children","element","classList","contains","click","setBorderTopClassForFirstCountryElement","firstCountryTabElement","otherCountryTabElements","firstCountryElement","otherCountryElements","add","countryElement","remove","setCountryCounter","setCountryDatalist","countryDatalistSet","src","Object","fromEntries","Array","from","index","autocomplete","dropdownClass","highlightClass","maximumItems","onSelectItem","searchHandler","source","treshold","event","value","target","label","countryList","querySelectorAll","country","parentElement","Set","startsWith","trim"],"mappings":"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","file":"utils.038ea233.js","sourceRoot":"../src","sourcesContent":["const CLOSED_BORDER = 'CLOSED_BORDER';\nconst NEGATIVE_TEST_REQUIRED = 'NEGATIVE_TEST_REQUIRED';\nconst NO_TEST_REQUIRED = 'NO_TEST_REQUIRED';\nconst QUARANTINE_REQUIRED = 'QUARANTINE_REQUIRED';\n\nexport const COUNTRY_TYPES = [CLOSED_BORDER, NEGATIVE_TEST_REQUIRED,\n  NO_TEST_REQUIRED, QUARANTINE_REQUIRED];\n\nexport const OBJECT_STORE = 'otvorene-granice';\nexport const IDB_DATABASE_NAME = `${OBJECT_STORE}-store`;\n","import { COUNTRY_TYPES } from './constants';\n\nconst titleCase = (text) => text.split(' ').map((item) => {\n  if (item === 'I') return item.toLowerCase();\n  if (item === 'SAD') return item;\n  return item.charAt(0) + item.substring(1).toLowerCase();\n}).join(' ');\n\nexport const hideLoader = () => {\n  const loader = document.getElementById('loader');\n  loader.innerHTML = '';\n};\n\nconst isFacebookApp = () => {\n  const ua = navigator.userAgent || navigator.vendor || window.opera;\n  return (ua.indexOf('FBAN') > -1) || (ua.indexOf('FBAV') > -1);\n};\n\nexport const adaptCSSFbBrowser = () => {\n  if (isFacebookApp()) {\n    $('.group-tabs').css('font-size', '12px');\n  }\n};\n\nexport const loadCountriesHtml = (countries) => {\n  if (countries.length === 0) return;\n\n  hideLoader();\n  const groups = countries.reduce((acc, current) => {\n    if (acc[current.status]) acc[current.status].push(current);\n    else acc[current.status] = [current];\n    return acc;\n  }, {});\n  COUNTRY_TYPES.forEach((type) => {\n    const countriesByType = document.getElementById(type);\n    const countriesByTypeBadge = document.getElementById(`${type}_BADGE`);\n    const countriesByTypeInfo = document.getElementById(`${type}_INFO`);\n    const countriesByTypeTab = document.getElementById(`${type}_TAB`);\n    const countriesByTypeTabBadge = document.getElementById(`${type}_TAB_BADGE`);\n    const countriesByTypeTabInfo = document.getElementById(`${type}_TAB_INFO`);\n    groups[type]?.forEach(({ name: countryName, info: countryInfo, flag }) => {\n      const countryHtml = `<div class=\"list-group-item list-group-item-action flex-column align-items-start\">\n      <div class=\"d-flex w-100 justify-content-between\">\n        <h5 class=\"mb-1 text-info country\">${flag} ${titleCase(countryName)}</h5>\n        </div>\n        <p class=\"mb-1 text-muted\" style=\"word-wrap:break-word\">${countryInfo}</p></div>`;\n      countriesByType.innerHTML += countryHtml;\n      countriesByTypeTab.innerHTML += countryHtml;\n    });\n    const { length } = groups[type];\n    const countriesByTypeStyleDisplay = length > 0 ? 'none' : '';\n    countriesByTypeInfo.style.display = countriesByTypeStyleDisplay;\n    countriesByTypeTabInfo.style.display = countriesByTypeStyleDisplay;\n    countriesByTypeBadge.innerHTML = length;\n    countriesByTypeTabBadge.innerHTML = length;\n  });\n};\n\nexport const resetCountriesHtml = () => {\n  COUNTRY_TYPES.forEach((type) => {\n    const countriesByType = document.getElementById(type);\n    const countriesByTypeTab = document.getElementById(`${type}_TAB`);\n\n    countriesByType.innerHTML = '';\n    countriesByTypeTab.innerHTML = '';\n  });\n};\n\nconst setActiveTab = () => {\n  for (let i = 0; i < COUNTRY_TYPES.length; i += 1) {\n    const type = COUNTRY_TYPES[i];\n    const countriesByTypeCounter = [].filter\n      .call(document.getElementById(`${type}_TAB`).children, (element) => element.style.display !== 'none')\n      .length;\n    if (countriesByTypeCounter !== 0 && document.getElementById(`${type}_TAB_LINK`).classList.contains('active')) return;\n    if (countriesByTypeCounter !== 0) {\n      return document.getElementById(`${type}_TAB_LINK`).click();\n    }\n  }\n};\n\nconst setBorderTopClassForFirstCountryElement = () => {\n  COUNTRY_TYPES.forEach((type) => {\n    const [firstCountryTabElement, ...otherCountryTabElements] = [].filter\n      .call(document.getElementById(`${type}_TAB`).children, (element) => element.style.display !== 'none');\n    const [firstCountryElement, ...otherCountryElements] = [].filter\n      .call(document.getElementById(type).children, (element) => element.style.display !== 'none');\n\n    if (!firstCountryElement || !firstCountryTabElement) return;\n\n    firstCountryTabElement.classList.add('border-top');\n    firstCountryElement.classList.add('border-top');\n    const countryElements = [...otherCountryElements, ...otherCountryTabElements];\n\n    countryElements.forEach((countryElement) => {\n      countryElement.classList.remove('border-top');\n    });\n  });\n};\n\nconst setCountryCounter = () => {\n  COUNTRY_TYPES.forEach((type) => {\n    const countriesByTypeCounter = [].filter\n      .call(document.getElementById(type).children, (element) => element.style.display !== 'none')\n      .length;\n    const countriesByTypeBadge = document.getElementById(`${type}_BADGE`);\n    const countriesByTypeTabBadge = document.getElementById(`${type}_TAB_BADGE`);\n    const countriesByTypeInfo = document.getElementById(`${type}_INFO`);\n    const countriesByTypeTabInfo = document.getElementById(`${type}_TAB_INFO`);\n    const countriesByTypeStyleDisplay = countriesByTypeCounter > 0 ? 'none' : '';\n    countriesByTypeInfo.style.display = countriesByTypeStyleDisplay;\n    countriesByTypeTabInfo.style.display = countriesByTypeStyleDisplay;\n    countriesByTypeBadge.innerHTML = countriesByTypeCounter;\n    countriesByTypeTabBadge.innerHTML = countriesByTypeCounter;\n  });\n};\n\nconst setCountryDatalist = (countryDatalistSet) => {\n  const src = Object.fromEntries(Array.from(countryDatalistSet)\n    .map((name, index) => {\n      const [countryName] = name.split(' (');\n      return [countryName, index + 1];\n    }));\n\n  $('#input-search').autocomplete({\n    dropdownClass: 'dropdown-menu w-100',\n    highlightClass: 'text-info',\n    maximumItems: 5,\n    onSelectItem: searchHandler, // eslint-disable-line\n    source: src,\n    treshold: 1,\n  });\n};\n\nexport const searchHandler = (event) => {\n  const value = event?.target?.value || event?.label;\n  const countryList = document.querySelectorAll('.country');\n  if (!value) {\n    countryList.forEach((country) => {\n      country.parentElement.parentElement.style.display = '';\n    });\n    setCountryCounter();\n    setBorderTopClassForFirstCountryElement();\n    return;\n  }\n\n  const countryDatalistSet = new Set();\n  countryList.forEach((country) => {\n    const [, ...name] = country.innerHTML.split(' ');\n    const countryName = name.join(' ');\n    const countryNameStartsWithValue = countryName.toLowerCase()\n      .startsWith(value.toLowerCase().trim());\n\n    if (countryNameStartsWithValue) {\n      country.parentElement.parentElement.style.display = '';\n      countryDatalistSet.add(countryName);\n    } else {\n      country.parentElement.parentElement.style.display = 'none';\n    }\n  });\n\n  setCountryDatalist(countryDatalistSet);\n  setActiveTab();\n  setCountryCounter();\n  setBorderTopClassForFirstCountryElement();\n};\n"]}