{"version":3,"sources":["scripts/constants.js","scripts/utils.js"],"names":["CLOSED_BORDER","NEGATIVE_TEST_REQUIRED","NO_TEST_REQUIRED","QUARANTINE_REQUIRED","COUNTRY_TYPES","titleCase","text","split","map","item","toLowerCase","charAt","substring","join","hideLoader","document","getElementById","innerHTML","adaptCSSFbBrowser","ua","navigator","userAgent","vendor","window","opera","isFacebookApp","$","css","console","log","loadCountries","API_URL","countries","fetch","then","response","json","length","groups","reduce","acc","current","status","push","forEach","type","countriesByType","countriesByTypeBadge","countriesByTypeInfo","countriesByTypeTab","countriesByTypeTabBadge","countriesByTypeTabInfo","name","countryName","info","countryInfo","flag","countryHtml","countriesByTypeStyleDisplay","style","display","err","error","setActiveTab","i","countriesByTypeCounter","filter","call","children","element","classList","contains","click","setBorderTopClassForFirstCountryElement","firstCountryTabElement","otherCountryTabElements","firstCountryElement","otherCountryElements","add","countryElement","remove","setCountryCounter","setCountryDatalist","countryDatalistSet","src","Object","fromEntries","Array","from","index","autocomplete","dropdownClass","highlightClass","maximumItems","onSelectItem","searchHandler","source","treshold","event","value","target","label","countryList","querySelectorAll","country","parentElement","Set","startsWith","trim"],"mappings":"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","file":"utils.1cfcfb11.js","sourceRoot":"../src","sourcesContent":["const CLOSED_BORDER = 'CLOSED_BORDER';\nconst NEGATIVE_TEST_REQUIRED = 'NEGATIVE_TEST_REQUIRED';\nconst NO_TEST_REQUIRED = 'NO_TEST_REQUIRED';\nconst QUARANTINE_REQUIRED = 'QUARANTINE_REQUIRED';\n\nexport const COUNTRY_TYPES = [CLOSED_BORDER, NEGATIVE_TEST_REQUIRED,\n  NO_TEST_REQUIRED, QUARANTINE_REQUIRED];\n","import { COUNTRY_TYPES } from './constants';\n\nconst titleCase = (text) => text.split(' ').map((item) => {\n  if (item === 'I') return item.toLowerCase();\n  if (item === 'SAD') return item;\n  return item.charAt(0) + item.substring(1).toLowerCase();\n}).join(' ');\n\nconst hideLoader = () => {\n  const loader = document.getElementById('loader');\n  loader.innerHTML = '';\n};\n\nexport const adaptCSSFbBrowser = () => {\n  const ua = navigator.userAgent || navigator.vendor || window.opera;\n  try {\n    if (isFacebookApp(ua)) { // eslint-disable-line\n      $('.group-tabs').css('font-size', '12px');\n    }\n  } catch {\n    console.log('Skipped Facebook browser style change');\n  }\n};\n\nexport const loadCountries = async () => {\n  try {\n    const API_URL = process.env.API_URL || 'https://open-borders.herokuapp.com';\n    const countries = await fetch(`${API_URL}/api/countries`).then((response) => response.json());\n    if (countries.length > 0) {\n      hideLoader();\n    }\n    const groups = countries.reduce((acc, current) => {\n      if (acc[current.status]) acc[current.status].push(current);\n      else acc[current.status] = [current];\n      return acc;\n    }, {});\n    COUNTRY_TYPES.forEach((type) => {\n      const countriesByType = document.getElementById(type);\n      const countriesByTypeBadge = document.getElementById(`${type}_BADGE`);\n      const countriesByTypeInfo = document.getElementById(`${type}_INFO`);\n      const countriesByTypeTab = document.getElementById(`${type}_TAB`);\n      const countriesByTypeTabBadge = document.getElementById(`${type}_TAB_BADGE`);\n      const countriesByTypeTabInfo = document.getElementById(`${type}_TAB_INFO`);\n      groups[type]?.forEach(({ name: countryName, info: countryInfo, flag }) => {\n        const countryHtml = `<div class=\"list-group-item list-group-item-action flex-column align-items-start\">\n        <div class=\"d-flex w-100 justify-content-between\">\n          <h5 class=\"mb-1 text-info country\">${flag} ${titleCase(countryName)}</h5>\n          </div>\n          <p class=\"mb-1 text-muted\" style=\"word-wrap:break-word\">${countryInfo}</p></div>`;\n        countriesByType.innerHTML += countryHtml;\n        countriesByTypeTab.innerHTML += countryHtml;\n      });\n      const { length } = groups[type];\n      const countriesByTypeStyleDisplay = length > 0 ? 'none' : '';\n      countriesByTypeInfo.style.display = countriesByTypeStyleDisplay;\n      countriesByTypeTabInfo.style.display = countriesByTypeStyleDisplay;\n      countriesByTypeBadge.innerHTML = length;\n      countriesByTypeTabBadge.innerHTML = length;\n    });\n  } catch (err) {\n    console.error(err);\n    hideLoader();\n  }\n};\n\nconst setActiveTab = () => {\n  for (let i = 0; i < COUNTRY_TYPES.length; i += 1) {\n    const type = COUNTRY_TYPES[i];\n    const countriesByTypeCounter = [].filter\n      .call(document.getElementById(`${type}_TAB`).children, (element) => element.style.display !== 'none')\n      .length;\n    if (countriesByTypeCounter !== 0 && document.getElementById(`${type}_TAB_LINK`).classList.contains('active')) return;\n    if (countriesByTypeCounter !== 0) {\n      return document.getElementById(`${type}_TAB_LINK`).click();\n    }\n  }\n};\n\nconst setBorderTopClassForFirstCountryElement = () => {\n  COUNTRY_TYPES.forEach((type) => {\n    const [firstCountryTabElement, ...otherCountryTabElements] = [].filter\n      .call(document.getElementById(`${type}_TAB`).children, (element) => element.style.display !== 'none');\n    const [firstCountryElement, ...otherCountryElements] = [].filter\n      .call(document.getElementById(type).children, (element) => element.style.display !== 'none');\n\n    if (!firstCountryElement || !firstCountryTabElement) return;\n\n    firstCountryTabElement.classList.add('border-top');\n    firstCountryElement.classList.add('border-top');\n    const countryElements = [...otherCountryElements, ...otherCountryTabElements];\n\n    countryElements.forEach((countryElement) => {\n      countryElement.classList.remove('border-top');\n    });\n  });\n};\n\nconst setCountryCounter = () => {\n  COUNTRY_TYPES.forEach((type) => {\n    const countriesByTypeCounter = [].filter\n      .call(document.getElementById(type).children, (element) => element.style.display !== 'none')\n      .length;\n    const countriesByTypeBadge = document.getElementById(`${type}_BADGE`);\n    const countriesByTypeTabBadge = document.getElementById(`${type}_TAB_BADGE`);\n    const countriesByTypeInfo = document.getElementById(`${type}_INFO`);\n    const countriesByTypeTabInfo = document.getElementById(`${type}_TAB_INFO`);\n    const countriesByTypeStyleDisplay = countriesByTypeCounter > 0 ? 'none' : '';\n    countriesByTypeInfo.style.display = countriesByTypeStyleDisplay;\n    countriesByTypeTabInfo.style.display = countriesByTypeStyleDisplay;\n    countriesByTypeBadge.innerHTML = countriesByTypeCounter;\n    countriesByTypeTabBadge.innerHTML = countriesByTypeCounter;\n  });\n};\n\nconst setCountryDatalist = (countryDatalistSet) => {\n  const src = Object.fromEntries(Array.from(countryDatalistSet)\n    .map((name, index) => {\n      const [countryName] = name.split(' (');\n      return [countryName, index + 1];\n    }));\n\n  $('#input-search').autocomplete({\n    dropdownClass: 'dropdown-menu w-100',\n    highlightClass: 'text-info',\n    maximumItems: 5,\n    onSelectItem: searchHandler, // eslint-disable-line\n    source: src,\n    treshold: 1,\n  });\n};\n\nexport const searchHandler = (event) => {\n  const value = event?.target?.value || event?.label;\n  const countryList = document.querySelectorAll('.country');\n  if (!value) {\n    countryList.forEach((country) => {\n      country.parentElement.parentElement.style.display = '';\n    });\n    setCountryCounter();\n    setBorderTopClassForFirstCountryElement();\n    return;\n  }\n\n  const countryDatalistSet = new Set();\n  countryList.forEach((country) => {\n    const [, ...name] = country.innerHTML.split(' ');\n    const countryName = name.join(' ');\n    const countryNameStartsWithValue = countryName.toLowerCase()\n      .startsWith(value.toLowerCase().trim());\n\n    if (countryNameStartsWithValue) {\n      country.parentElement.parentElement.style.display = '';\n      countryDatalistSet.add(countryName);\n    } else {\n      country.parentElement.parentElement.style.display = 'none';\n    }\n  });\n\n  setCountryDatalist(countryDatalistSet);\n  setActiveTab();\n  setCountryCounter();\n  setBorderTopClassForFirstCountryElement();\n};\n"]}