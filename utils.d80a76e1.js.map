{"version":3,"sources":["scripts/constants.js","scripts/utils.js"],"names":["NEGATIVE_TEST_REQUIRED","NO_TEST_REQUIRED","QUARANTINE_REQUIRED","COUNTRY_TYPES","titleCase","text","split","map","item","toLowerCase","charAt","substring","join","loadCountries","API_URL","groups","fetch","then","response","json","reduce","acc","current","status","push","forEach","type","countriesByType","document","getElementById","countriesByTypeBadge","countriesByTypeInfo","countriesByTypeTab","countriesByTypeTabBadge","countriesByTypeTabInfo","name","countryName","info","countryInfo","flag","countryHtml","innerHTML","length","countriesByTypeStyleDisplay","style","display","err","console","error","setBorderTopClassForFirstCountryElement","firstCountryTabElement","otherCountryTabElements","filter","call","children","element","firstCountryElement","otherCountryElements","classList","add","countryElement","remove","setCountryCounter","countriesByTypeCounter","setCountryDatalist","countryDatalistSet","src","Object","fromEntries","Array","from","index","$","autocomplete","dropdownClass","highlightClass","maximumItems","onSelectItem","searchHandler","source","treshold","event","value","target","label","countryListValues","querySelectorAll","values","country","parentElement","Set","startsWith","trim"],"mappings":"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","file":"utils.d80a76e1.js","sourceRoot":"../src","sourcesContent":["const NEGATIVE_TEST_REQUIRED = 'NEGATIVE_TEST_REQUIRED';\nconst NO_TEST_REQUIRED = 'NO_TEST_REQUIRED';\nconst QUARANTINE_REQUIRED = 'QUARANTINE_REQUIRED';\n\nexport const COUNTRY_TYPES = [NEGATIVE_TEST_REQUIRED, NO_TEST_REQUIRED, QUARANTINE_REQUIRED];\n","import { COUNTRY_TYPES } from './constants';\n\nconst titleCase = (text) => text.split(' ').map((item) => {\n  if (item === 'I') return item.toLowerCase();\n  if (item === 'SAD') return item;\n  return item.charAt(0) + item.substring(1).toLowerCase();\n}).join(' ');\n\nexport const loadCountries = async () => {\n  try {\n    const API_URL = process.env.API_URL || 'https://open-borders.herokuapp.com';\n    const countries = await fetch(`${API_URL}/api/countries`).then((response) => response.json());\n    const groups = countries.reduce((acc, current) => {\n      if (acc[current.status]) acc[current.status].push(current);\n      else acc[current.status] = [current];\n      return acc;\n    }, {});\n    COUNTRY_TYPES.forEach((type) => {\n      const countriesByType = document.getElementById(type);\n      const countriesByTypeBadge = document.getElementById(`${type}_BADGE`);\n      const countriesByTypeInfo = document.getElementById(`${type}_INFO`);\n      const countriesByTypeTab = document.getElementById(`${type}_TAB`);\n      const countriesByTypeTabBadge = document.getElementById(`${type}_TAB_BADGE`);\n      const countriesByTypeTabInfo = document.getElementById(`${type}_TAB_INFO`);\n      groups[type]?.forEach(({ name: countryName, info: countryInfo, flag }) => {\n        const countryHtml = `<div class=\"list-group-item list-group-item-action flex-column align-items-start\">\n        <div class=\"d-flex w-100 justify-content-between\">\n          <h5 class=\"mb-1 text-info country\">${flag} ${titleCase(countryName)}</h5>\n          </div>\n          <p class=\"mb-1 text-muted\" style=\"word-wrap:break-word\">${countryInfo}</p></div>`;\n        countriesByType.innerHTML += countryHtml;\n        countriesByTypeTab.innerHTML += countryHtml;\n      });\n      const { length } = groups[type];\n      const countriesByTypeStyleDisplay = length > 0 ? 'none' : '';\n      countriesByTypeInfo.style.display = countriesByTypeStyleDisplay;\n      countriesByTypeTabInfo.style.display = countriesByTypeStyleDisplay;\n      countriesByTypeBadge.innerHTML = length;\n      countriesByTypeTabBadge.innerHTML = length;\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst setBorderTopClassForFirstCountryElement = () => {\n  COUNTRY_TYPES.forEach((type) => {\n    const [firstCountryTabElement, ...otherCountryTabElements] = [].filter\n      .call(document.getElementById(`${type}_TAB`).children, (element) => element.style.display !== 'none');\n    const [firstCountryElement, ...otherCountryElements] = [].filter\n      .call(document.getElementById(type).children, (element) => element.style.display !== 'none');\n\n    if (!firstCountryElement || !firstCountryTabElement) return;\n\n    firstCountryTabElement.classList.add('border-top');\n    firstCountryElement.classList.add('border-top');\n    const countryElements = [...otherCountryElements, ...otherCountryTabElements];\n\n    countryElements.forEach((countryElement) => {\n      countryElement.classList.remove('border-top');\n    });\n  });\n};\n\nconst setCountryCounter = () => {\n  COUNTRY_TYPES.forEach((type) => {\n    const countriesByTypeCounter = [].filter\n      .call(document.getElementById(type).children, (element) => element.style.display !== 'none')\n      .length;\n    const countriesByTypeBadge = document.getElementById(`${type}_BADGE`);\n    const countriesByTypeTabBadge = document.getElementById(`${type}_TAB_BADGE`);\n    const countriesByTypeInfo = document.getElementById(`${type}_INFO`);\n    const countriesByTypeTabInfo = document.getElementById(`${type}_TAB_INFO`);\n    const countriesByTypeStyleDisplay = countriesByTypeCounter > 0 ? 'none' : '';\n    countriesByTypeInfo.style.display = countriesByTypeStyleDisplay;\n    countriesByTypeTabInfo.style.display = countriesByTypeStyleDisplay;\n    countriesByTypeBadge.innerHTML = countriesByTypeCounter;\n    countriesByTypeTabBadge.innerHTML = countriesByTypeCounter;\n  });\n};\n\nconst setCountryDatalist = (countryDatalistSet) => {\n  const src = Object.fromEntries(Array.from(countryDatalistSet)\n    .map((countryName, index) => [countryName, index + 1]));\n\n  $('#input-search').autocomplete({\n    dropdownClass: 'dropdown-menu w-100',\n    highlightClass: 'text-info',\n    maximumItems: 0,\n    onSelectItem: searchHandler, // eslint-disable-line\n    source: src,\n    treshold: 1,\n  });\n};\n\nexport const searchHandler = (event) => {\n  const value = event?.target?.value || event?.label;\n  const countryList = document.querySelectorAll('.country');\n  const countryListValues = countryList.values();\n  if (!value) {\n    countryListValues.forEach((country) => {\n      country.parentElement.parentElement.style.display = '';\n    });\n    setCountryCounter();\n    setBorderTopClassForFirstCountryElement();\n    return;\n  }\n\n  const countryDatalistSet = new Set();\n  countryListValues.forEach((country) => {\n    const [, ...name] = country.innerHTML.split(' ');\n    const countryName = name.join(' ');\n    const countryNameStartsWithValue = countryName.toLowerCase()\n      .startsWith(value.toLowerCase().trim());\n\n    if (countryNameStartsWithValue) {\n      country.parentElement.parentElement.style.display = '';\n      countryDatalistSet.add(countryName);\n    } else {\n      country.parentElement.parentElement.style.display = 'none';\n    }\n  });\n\n  setCountryDatalist(countryDatalistSet);\n  setCountryCounter();\n  setBorderTopClassForFirstCountryElement();\n};\n"]}