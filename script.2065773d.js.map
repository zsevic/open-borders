{"version":3,"sources":["script.js"],"names":["NEGATIVE_TEST_REQUIRED","NO_TEST_REQUIRED","QUARANTINE_REQUIRED","countryTypes","titleCase","text","split","map","item","toLowerCase","charAt","substring","join","document","getElementById","addEventListener","event","value","target","countryList","querySelectorAll","country","values","parentElement","style","display","name","innerHTML","startsWith","loadCountries","API_URL","groups","fetch","then","response","json","reduce","acc","current","status","push","forEach","type","countriesByType","countriesByTypeTab","countryName","info","countryInfo","flag","countryHtml","err","console","error"],"mappings":";AAAA,MAAMA,EAAyB,yBACzBC,EAAmB,mBACnBC,EAAsB,sBAEtBC,EAAe,CAACH,EAAwBC,EAAkBC,GAE1DE,EAAaC,GAASA,EAAKC,MAAM,KAAKC,IAAIC,GACjC,MAATA,EAAqBA,EAAKC,cACjB,QAATD,EAAuBA,EACpBA,EAAKE,OAAO,GAAKF,EAAKG,UAAU,GAAGF,eACzCG,KAAK,KAERC,SAASC,eAAe,gBAAgBC,iBAAiB,QAAUC,IAC3D,MAAA,MAAEC,GAAUD,EAAME,OACpB,IAACD,EAAO,CACJE,MAAAA,EAAcN,SAASO,iBAAiB,YACzC,IAAA,MAAMC,KAAWF,EAAYG,SAChCD,EAAQE,cAAcA,cAAcC,MAAMC,QAAU,GAEtD,OAGIN,MAAAA,EAAcN,SAASO,iBAAiB,YACzC,IAAA,MAAMC,KAAWF,EAAYG,SAAU,CACpC,MAAG,IAAGI,GAAQL,EAAQM,UAAUrB,MAAM,KACxBoB,EAAKd,KAAK,KAAKH,cAEnBmB,WAAWX,EAAMR,eAC/BY,EAAQE,cAAcA,cAAcC,MAAMC,QAAU,GAEpDJ,EAAQE,cAAcA,cAAcC,MAAMC,QAAU,UAK1D,MAAMI,EAAgB,UAChB,IACIC,MAAAA,EAAiC,qCAEjCC,SADkBC,MAASF,GAAAA,OAAAA,EAAT,mBAAkCG,KAAKC,GAAYA,EAASC,SAC3DC,OAAO,CAACC,EAAKC,KAChCD,EAAIC,EAAQC,QAASF,EAAIC,EAAQC,QAAQC,KAAKF,GAC7CD,EAAIC,EAAQC,QAAU,CAACD,GACrBD,GACN,IACHlC,EAAasC,QAAQC,IAAQ,IAAA,EACrBC,MAAAA,EAAkB9B,SAASC,eAAe4B,GAC1CE,EAAqB/B,SAASC,eAAkB4B,GAAAA,OAAAA,EAAtD,SACcD,QAAdV,EAAAA,EAAOW,UAAOD,IAAAA,GAAAA,EAAAA,QAA4D,IAAnD,IAAEf,KAAMmB,EAAaC,KAAMC,EAA3B,KAAwCC,GAAW,EAClEC,MAAAA,EAEiCD,gMAAAA,OAAAA,EAAQ5C,KAAAA,OAAAA,EAAUyC,GAEGE,+FAAAA,OAAAA,EAJ5D,cAKAJ,EAAgBhB,WAAasB,EAC7BL,EAAmBjB,WAAasB,MAGpC,MAAOC,GACPC,QAAQC,MAAMF,KAIlBrB","file":"script.2065773d.js","sourceRoot":"../src","sourcesContent":["const NEGATIVE_TEST_REQUIRED = 'NEGATIVE_TEST_REQUIRED';\nconst NO_TEST_REQUIRED = 'NO_TEST_REQUIRED';\nconst QUARANTINE_REQUIRED = 'QUARANTINE_REQUIRED';\n\nconst countryTypes = [NEGATIVE_TEST_REQUIRED, NO_TEST_REQUIRED, QUARANTINE_REQUIRED];\n\nconst titleCase = (text) => text.split(' ').map(item => {\n  if (item === 'I') return item.toLowerCase();\n  if (item === 'SAD') return item;\n  return item.charAt(0) + item.substring(1).toLowerCase();\n}).join(' ');\n\ndocument.getElementById('input-search').addEventListener('input', (event) => {\n  const { value } = event.target;\n  if (!value) {\n    const countryList = document.querySelectorAll('.country');\n    for (const country of countryList.values()) {\n      country.parentElement.parentElement.style.display = '';\n    }\n    return;\n  }\n\n  const countryList = document.querySelectorAll('.country');\n  for (const country of countryList.values()) {\n    const [, ...name] = country.innerHTML.split(' ');\n    const countryName = name.join(' ').toLowerCase();\n\n    if (countryName.startsWith(value.toLowerCase())) {\n      country.parentElement.parentElement.style.display = '';\n    } else {\n      country.parentElement.parentElement.style.display = 'none';\n    }\n  }\n});\n\nconst loadCountries = async () => {\n  try {\n    const API_URL = process.env.API_URL || 'https://open-borders.herokuapp.com';\n    const countries = await fetch(`${API_URL}/api/countries`).then(response => response.json());\n    const groups = countries.reduce((acc, current) => {\n      if (acc[current.status]) acc[current.status].push(current);\n      else acc[current.status] = [current];\n      return acc;\n    }, {});\n    countryTypes.forEach(type => {\n      const countriesByType = document.getElementById(type);\n      const countriesByTypeTab = document.getElementById(`${type}_TAB`);\n      groups[type]?.forEach(({ name: countryName, info: countryInfo, flag }) => {\n        const countryHtml = `<div class=\"list-group-item list-group-item-action flex-column align-items-start\">\n        <div class=\"d-flex w-100 justify-content-between\">\n          <h5 class=\"mb-1 text-info country\">${flag} ${titleCase(countryName)}</h5>\n          </div>\n          <p class=\"mb-1 text-muted\" style=\"word-wrap:break-word\">${countryInfo}</p></div>`;\n        countriesByType.innerHTML += countryHtml;\n        countriesByTypeTab.innerHTML += countryHtml;\n      });\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nloadCountries();\n"]}