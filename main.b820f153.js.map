{"version":3,"sources":["scripts/constants.js","scripts/utils.js","scripts/main.js"],"names":["NEGATIVE_TEST_REQUIRED","NO_TEST_REQUIRED","QUARANTINE_REQUIRED","COUNTRY_TYPES","loadCountries","API_URL","groups","fetch","then","response","json","reduce","acc","current","status","push","forEach","type","countriesByType","document","getElementById","countriesByTypeBadge","countriesByTypeInfo","countriesByTypeTab","countriesByTypeTabBadge","countriesByTypeTabInfo","name","countryName","info","countryInfo","flag","countryHtml","titleCase","innerHTML","length","countriesByTypeStyleDisplay","style","display","err","console","error","searchHandler","event","value","target","label","countryList","querySelectorAll","country","values","parentElement","setCountryCounter","setBorderTopClassForFirstCountryElement","countryDatalistSet","Set","split","join","toLowerCase","startsWith","trim","add","setCountryDatalist","firstCountryTabElement","otherCountryTabElements","filter","call","children","element","firstCountryElement","otherCountryElements","classList","countryElements","countryElement","remove","countriesByTypeCounter","src","Object","fromEntries","Array","from","map","index","$","autocomplete","dropdownClass","highlightClass","maximumItems","onSelectItem","source","treshold","text","item","charAt","substring","addEventListener"],"mappings":"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","file":"main.b820f153.js","sourceRoot":"../src","sourcesContent":["const NEGATIVE_TEST_REQUIRED = 'NEGATIVE_TEST_REQUIRED';\nconst NO_TEST_REQUIRED = 'NO_TEST_REQUIRED';\nconst QUARANTINE_REQUIRED = 'QUARANTINE_REQUIRED';\n\nexport const COUNTRY_TYPES = [NEGATIVE_TEST_REQUIRED, NO_TEST_REQUIRED, QUARANTINE_REQUIRED];\n","import { COUNTRY_TYPES } from './constants';\n\nexport const loadCountries = async () => {\n  try {\n    const API_URL = process.env.API_URL || 'https://open-borders.herokuapp.com';\n    const countries = await fetch(`${API_URL}/api/countries`).then(response => response.json());\n    const groups = countries.reduce((acc, current) => {\n      if (acc[current.status]) acc[current.status].push(current);\n      else acc[current.status] = [current];\n      return acc;\n    }, {});\n    COUNTRY_TYPES.forEach(type => {\n      const countriesByType = document.getElementById(type);\n      const countriesByTypeBadge = document.getElementById(`${type}_BADGE`);\n      const countriesByTypeInfo = document.getElementById(`${type}_INFO`);\n      const countriesByTypeTab = document.getElementById(`${type}_TAB`);\n      const countriesByTypeTabBadge = document.getElementById(`${type}_TAB_BADGE`);\n      const countriesByTypeTabInfo = document.getElementById(`${type}_TAB_INFO`);\n      groups[type]?.forEach(({ name: countryName, info: countryInfo, flag }) => {\n        const countryHtml = `<div class=\"list-group-item list-group-item-action flex-column align-items-start\">\n        <div class=\"d-flex w-100 justify-content-between\">\n          <h5 class=\"mb-1 text-info country\">${flag} ${titleCase(countryName)}</h5>\n          </div>\n          <p class=\"mb-1 text-muted\" style=\"word-wrap:break-word\">${countryInfo}</p></div>`;\n        countriesByType.innerHTML += countryHtml;\n        countriesByTypeTab.innerHTML += countryHtml;\n      });\n      const { length } = groups[type];\n      const countriesByTypeStyleDisplay = length > 0 ? 'none' : '';\n      countriesByTypeInfo.style.display = countriesByTypeStyleDisplay;\n      countriesByTypeTabInfo.style.display = countriesByTypeStyleDisplay;\n      countriesByTypeBadge.innerHTML = length;\n      countriesByTypeTabBadge.innerHTML = length;\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const searchHandler = (event) => {\n  const value = event?.target?.value || event?.label;\n  if (!value) {\n    const countryList = document.querySelectorAll('.country');\n    for (const country of countryList.values()) {\n      country.parentElement.parentElement.style.display = '';\n    }\n    setCountryCounter();\n    setBorderTopClassForFirstCountryElement();\n    return;\n  }\n\n  const countryList = document.querySelectorAll('.country');\n  const countryDatalistSet = new Set();\n  for (const country of countryList.values()) {\n    const [, ...name] = country.innerHTML.split(' ');\n    const countryName = name.join(' ');\n    const countryNameStartsWithValue = countryName.toLowerCase()\n      .startsWith(value.toLowerCase().trim());\n\n    if (countryNameStartsWithValue) {\n      country.parentElement.parentElement.style.display = '';\n      countryDatalistSet.add(countryName);\n    } else {\n      country.parentElement.parentElement.style.display = 'none';\n    }\n  }\n\n  setCountryDatalist(countryDatalistSet);\n  setCountryCounter();\n  setBorderTopClassForFirstCountryElement();\n};\n\nconst setBorderTopClassForFirstCountryElement = () => {\n  COUNTRY_TYPES.forEach(type => {\n    const [firstCountryTabElement, ...otherCountryTabElements] = [].filter\n      .call(document.getElementById(`${type}_TAB`).children, (element) => element.style.display !== 'none');\n    const [firstCountryElement, ...otherCountryElements] = [].filter\n      .call(document.getElementById(type).children, (element) => element.style.display !== 'none');\n\n    if (!firstCountryElement || !firstCountryTabElement) return;\n\n    firstCountryTabElement.classList.add('border-top');\n    firstCountryElement.classList.add('border-top');\n    const countryElements = [...otherCountryElements, ...otherCountryTabElements];\n\n    for (const countryElement of countryElements) {\n      countryElement.classList.remove('border-top');\n    }\n  });\n};\n\nconst setCountryCounter = () => {\n  COUNTRY_TYPES.forEach(type => {\n    const countriesByTypeCounter = [].filter\n      .call(document.getElementById(type).children, (element) => element.style.display !== 'none')\n      .length;\n    const countriesByTypeBadge = document.getElementById(`${type}_BADGE`);\n    const countriesByTypeTabBadge = document.getElementById(`${type}_TAB_BADGE`);\n    const countriesByTypeInfo = document.getElementById(`${type}_INFO`);\n    const countriesByTypeTabInfo = document.getElementById(`${type}_TAB_INFO`);\n    const countriesByTypeStyleDisplay = countriesByTypeCounter > 0 ? 'none' : '';\n    countriesByTypeInfo.style.display = countriesByTypeStyleDisplay;\n    countriesByTypeTabInfo.style.display = countriesByTypeStyleDisplay;\n    countriesByTypeBadge.innerHTML = countriesByTypeCounter;\n    countriesByTypeTabBadge.innerHTML = countriesByTypeCounter;\n  });\n};\n\nconst setCountryDatalist = (countryDatalistSet) => {\n  const src = Object.fromEntries(Array.from(countryDatalistSet)\n    .map((countryName, index) => [countryName, index + 1]));\n\n  $('#input-search').autocomplete({\n    dropdownClass: 'dropdown-menu w-100',\n    highlightClass: 'text-info',\n    maximumItems: 0,\n    onSelectItem: searchHandler,\n    source: src,\n    treshold: 1,\n  });\n};\n\nconst titleCase = (text) => text.split(' ').map(item => {\n  if (item === 'I') return item.toLowerCase();\n  if (item === 'SAD') return item;\n  return item.charAt(0) + item.substring(1).toLowerCase();\n}).join(' ');\n","import { loadCountries, searchHandler } from './utils';\n\ndocument.getElementById('input-search').addEventListener('input', searchHandler);\n\nloadCountries();\n"]}